mode: train
task-name: TCiP-LTCC
gpu: [0]
eval_interval: 5 # eval each [eval_interval]
vis: True       # visualize feature distribution
vis_interval: 120  # visualization each [vis_interval]

model-manager:
  network_name: TCiP
  save_name: TCiP-LTCC
  network-params: # the params used to create model
    PRETRAIN_CHOICE: 'imagenet'
    num_clothes: 256
    PRETRAIN_PATH: './pretrained/jx_vit_base_p16_224-80ecf9dd.pth'
    METRIC_LOSS_TYPE: 'triplet'
    IF_LABELSMOOTH: 'off'
    IF_WITH_CENTER: 'no'
    NAME: 'transformer'
    NO_MARGIN: True
    TRANSFORMER_TYPE: 'vit_base_patch16_224_TransReID'
    STRIDE_SIZE: [ 12, 12 ]
    SIE_CAMERA: True
    SIE_COE: 3.0
    JPM: True
    RE_ARRANGE: True
    CAMERA_NUM: 12
    SIZE_INPUT: [ 256, 128 ]
    use_mask: True
    feat_weight: [1.0, 1.0, 1.0]
    loss_weight: [1.0, 1.0, 1.0, 1.0, 1000.0]
  network_inputs: ['img', 'camera_id', 'pid', 'unique_clothes_id', 'sem']
  epoch: 120
  solver:
    optimizer: SGD
    base_lr: 0.0001
    weight_decay: 0.0001
    warmup_epochs: 5
    max_epoch: 120
  use_model_loss: True
  re_ranking: False
  loss:
    use_loss: [ 'triplet','cross_entropy' ]    # loss used for backward
    wrt: # loss wrt params
      weight: 1.0     # loss weight in total loss
      except_input: 'feature'     # except input tensor type
      list_weight: [0.5, 0.125, 0.125, 0.125, 0.125, 0.125]
    xent_label_smooth: # loss xent_label_smooth params
      weight: 1.0
      params_initial: [ 'num_classes' ]     # params used for initialize the loss object
      except_input: 'score'       # except input tensor type
      list_weight: [0.5, 0.125, 0.125, 0.125, 0.125, 0.125]
    triplet:
      weight: 1.0
      except_input: 'feature'
      list_weight: [0.4, 0.4, 0.1]
    cross_entropy:
      weight: 1.0
      except_input: 'score'       # except input tensor type
      list_weight: [0.4, 0.4, 0.1]

dataset:
  dataset_name: ltcc
  dataset_path: ../dataset/LTCC_ReID
  num_workers: 8
  num_instance: 8
  num_per_clothes: 2
  type: image
  # reading method
  batch_size_train: 64
  reading_method_train:
    name: get_img_sem
    # define other parameter, such as image size
    image_size: [ 256, 128 ]
    mean: [0.5, 0.5, 0.5]
    std: [0.5, 0.5, 0.5]
    mode: train
  batch_size_test: 128
  reading_method_test:
    name: get_img_sem
    # define other parameter, such as image size
    image_size: [ 256, 128 ]
    mean: [ 0.5, 0.5, 0.5 ]
    std: [ 0.5, 0.5, 0.5 ]
    mode: test
